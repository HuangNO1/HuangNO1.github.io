<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>計算機科學 - 標籤 - Rem Blog</title>
        <link>https://huangno1.github.io/tags/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8/</link>
        <description>計算機科學 - 標籤 - Rem Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>fh831.cp9gw@gmail.com (Huang Po-Hsun)</managingEditor>
            <webMaster>fh831.cp9gw@gmail.com (Huang Po-Hsun)</webMaster><lastBuildDate>Mon, 03 May 2021 17:28:28 &#43;0800</lastBuildDate><atom:link href="https://huangno1.github.io/tags/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8/" rel="self" type="application/rss+xml" /><item>
    <title>互聯網公司大廠 – 面試八股文彙整</title>
    <link>https://huangno1.github.io/cs_interview_eight_part_questions/</link>
    <pubDate>Mon, 03 May 2021 17:28:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/cs_interview_eight_part_questions/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/cs_interview_eight_part_questions.jpg" referrerpolicy="no-referrer">
            </div>前言 因為 2021/03 月份我已經是大三了，我開始在春招找實習 Offer，在找實習的期間我在牛課網以及各大平台的面經驗分享中整理出一份八文面試題，整理的過程整整花了我將近一週的時間，希望我整理的內容對各位有幫助。
註：這篇文章是針對 C/C++ 崗位的面試題，數據結構、算法、操作系統、計算機網路、數據庫對大部分崗位是通用的。
重要度 重要性: 語言基礎 &gt;= 數據結構 == 算法 &gt; 操作系統 &gt; 計算機網路 &raquo;&gt; 數據庫 &gt;= 機器學習
語言基礎 C++ 三大特性 封装性是基础，继承性是关键，多态性是补充，并且多态性存在于继承的环境中。 C++语言中支持数据封装，类是支持数据封装的工具，对象是数据封装的实现。 在封装中，还提供一种对数据访问的控制机制，使得一些数据被隐藏在封装体内，因此具有隐藏性。
封裝、繼承、多態，簡單說明 封装性:把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。 类将成员变量和成员函数封装在类的内部，根据需要设置访问权限，通过成员函数管理内部状态。
1 2 3 4 5 6 7 8 9 10 11  class Person { private://数据私有  string bame; int num; public://方法公有  void getName() { return name; } };   繼承:继承所表达的是类之间相关的关系，这种关系使得对象可以继承另外一类对象的特征和能力。 继承的作用：避免公用代码的重复开发，减少代码和数据冗余。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  #include &lt;iostream&gt; using namespace std; class Base { public: void printBase(void) { cout&lt;&lt;&#34;Base中的printBase&#34;&lt;&lt;endl; } }; class Son:public Base { }; int main(int argc, char *argv[]) { Son ob; ob.]]></description>
</item><item>
    <title>關於學習軟件工程、計算機科學與技術的方法</title>
    <link>https://huangno1.github.io/how_to_learn_cs/</link>
    <pubDate>Tue, 04 Aug 2020 21:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/how_to_learn_cs/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/how_to_learn_cs.png" referrerpolicy="no-referrer">
            </div>學習態度  讀萬卷書不如行萬里路。
 我認為學習工程相關最重要的莫過於要親身去實踐手作，而非靠一堆理論知識和小實驗去學習，做項目讓自己有經驗莫過於看一堆理論知識以及為考試或光鮮亮麗的文憑。切記，實作是刻印在人的身體。
再者，學習是靠興趣的，想要學好軟件工程，需要愛上編程，如果只是像學校老師或學長姊得學習步調走，而不自己主動去學習並實作自己感興趣部份，你將永遠不會學會編程。
學習步調 學習一門技術分幾個階段：
  初步認識，了解原理等理論知識。
  會寫 Hello world，學會基礎使用語法。
  熟練該門語言，並能自己使用這技術開發中小型 Demo 與項目。
  精通該語言，能駕馭該門技術，開發大型項目。
  不要學到了 Hello world 就認為自己已經精通了，你還隻是菜鳥。不要還沒學會爬就想跑步，除非你自認天才。
關於文檔 我自己認為文檔在開發項目的比重並沒有很重要，要求文檔的前提是整體隊伍有一定的水平實力能去實現，不然寫出來的文檔也無法實現。做項目的是人不是文字，文檔頂多起到開發輔助的效用。然而，現在學校很多比賽卻是重視文檔，各種 PPT 大賽到 PS、PR 編程，這事實讓人痛心，使很多有實力的人因為文檔的繁文縟節而退卻。要真正做到的是項目不是靠文字或嘴巴或白嫖網上開源代碼&hellip;&hellip;等方法實現，而是靠自己紮實編寫的代碼。
代碼技巧與學習管道 我認為有幾個技能是一個程序員必備的：
  學會使用搜索引擎關鍵字。
  翻牆使用 Google、Github、Stackoverflow、Youtube&hellip;等學習網頁。
  官方文檔有時是最好的選擇。
  編程注意註解，還有變量函數命名、代碼編排，儘可能讓代碼精簡。
  要捨得花時間學習新知識。
  Git、Github、Markdown 的使用，寫正式報告建議使用 LaTeX。文檔交 PDF 格式。
  自己的 Blog，用來創造發表自己的想法與技巧。
  保持上進心、好奇心與謙虛，要勇於探索新事物，且人上有人，天外有天。
  最後希望大家能擇你所愛，愛你所擇，如果敲代碼是你的興趣，那恭喜你，你有自己的愛好。]]></description>
</item></channel>
</rss>
