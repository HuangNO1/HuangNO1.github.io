<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C&#43;&#43; - 標籤 - Rem Blog</title>
        <link>https://huangno1.github.io/tags/c&#43;&#43;/</link>
        <description>C&#43;&#43; - 標籤 - Rem Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>fh831.cp9gw@gmail.com (Huang Po-Hsun)</managingEditor>
            <webMaster>fh831.cp9gw@gmail.com (Huang Po-Hsun)</webMaster><lastBuildDate>Fri, 07 Aug 2020 18:49:28 &#43;0800</lastBuildDate><atom:link href="https://huangno1.github.io/tags/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>C&#43;&#43; - 關於多態中的虛函數</title>
    <link>https://huangno1.github.io/about_c-_class_virtual_function/</link>
    <pubDate>Fri, 07 Aug 2020 18:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/about_c-_class_virtual_function/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/about_c&#43;&#43;_class_virtual_function.png" referrerpolicy="no-referrer">
            </div>前言 大一自己寫 C++ 時碰到的問題，一直沒發表文章，現在趁有空寫一下。
關於多態與虛函數 我的理解是多態就是一個類（class）演伸出多種物件（Object），父類相當於模板藍圖的功能。
我們先看一下虛函數嘴臉長怎樣：
在下面的例子中是一個 Base Class（基類、父類），如果函數前面宣告有添加 virtual 就是虛函數。
1 2 3 4 5 6  class Shape { public: virtual string toString() const; virtual double getArea() const; }   下面是一個 Circle 子類（superclass）（超生類、派生類），引入 Circle 的 getArea() 和 toString() 是虛函數，我們現在是在子類中重寫（重定義）類的虛構函數（此時你可以將父類的虛構函數想像成模板）。
1 2 3 4 5 6 7 8 9 10 11 12  class Circle : public Shape { private: double radius; public: Circle(); Circle(double); double getRadius() const; void setRadius(double); double getArea() const; string toString() const; }   實際當我們在使用虛構函數時，是把它當作跳板，去自動便是哪個函式是哪個函式，e.]]></description>
</item><item>
    <title>C&#43;&#43; 關於某小數轉進制的題目-解題經驗</title>
    <link>https://huangno1.github.io/c-_solving_decimal_programming/</link>
    <pubDate>Fri, 11 Oct 2019 12:24:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/c-_solving_decimal_programming/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/c&#43;&#43;_solving_decimal_programming.png" referrerpolicy="no-referrer">
            </div>前言 最近我朋友問了我一個關於一個小數轉進制的題目，雖然我當時很忙，但最後我還是抽出了時間幫忙解決，解題的一開始我以為題目挺簡單的，但在解題過程發現還蠻多小技巧要使用，我會在這篇文章分享我的解題過程。
題目 我先給各位看一下題目。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  Objective Programming using basic data types and control structures. Specification Write a program which converts a base-S floating point number with value in the range [0,1) to its equivalent base-D representation, where S, D =2, … , 10.]]></description>
</item><item>
    <title>在 Archlinux 搭建 VScode C/C&#43;&#43; 開發環境（GCC）及 調試（GDB）</title>
    <link>https://huangno1.github.io/archlinux_vscode_build_gdb_gcc/</link>
    <pubDate>Sat, 20 Apr 2019 14:22:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/archlinux_vscode_build_gdb_gcc/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/visual_studio_code_2019_icons_preview.png" referrerpolicy="no-referrer">
            </div>前言 相信我，肥宅我看了很多網站上教學，都是老舊的廢文，甚至如果照做就有可能造成出錯的問題。還有很多文章也沒有詳細講解該如何配置，關於 Linux 中的 GDB 配置在 VScode 的文章少之又少，錯誤百出。因此肥宅在這教導各位正確地在 Linux 環境下從安裝 VScode 到配置環境變量與 GDB 調試。
肥宅的 Linux 發行版資訊 肥宅使用的發行版是 ArchLinux，圖形界面是 KDE Plasma。
系統資訊1.png
" 系統資訊 
下載安裝 VScode 在 Konsole 輸入下載指令 1  sudo pacman -S code    註：因爲圖形界面的使用者一定是一般使用者，不可能是超級使用者，所以在輸 pacman 前面要加上 sudo。
 安裝 VScode2.png
" 安裝 VScode 
輸入 y 並按下 Enter。
下載 GCC GDB  註：肥宅是在 Windows OS 用習慣了 MinGW-w64，但在 Linux 這樣配置並不是很好的選擇，如果你使用 GCC 或 Clang 會跟 Linux 兼容性高。MinGW-w64 軟件包包含 gcc g++ GDB&hellip;等內容及 API。]]></description>
</item></channel>
</rss>
