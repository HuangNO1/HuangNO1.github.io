<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Rem Blog</title>
        <link>https://huangno1.github.io/posts/</link>
        <description>所有文章 | Rem Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>fh831.cp9gw@gmail.com (Huang Po-Hsun)</managingEditor>
            <webMaster>fh831.cp9gw@gmail.com (Huang Po-Hsun)</webMaster><lastBuildDate>Fri, 07 Aug 2020 18:49:28 &#43;0800</lastBuildDate><atom:link href="https://huangno1.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>C&#43;&#43; - 關於多態中的虛函數與純虛函數</title>
    <link>https://huangno1.github.io/about_c-_class_virtual_function/</link>
    <pubDate>Fri, 07 Aug 2020 18:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/about_c-_class_virtual_function/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/about_c&#43;&#43;_class_virtual_function.png" referrerpolicy="no-referrer">
            </div>前言 大一自己寫 C++ 時碰到的問題，一直沒發表文章，現在趁有空寫一下。
多態與虛函數  P.S. 大陸叫對象，台灣叫物件。
 我的理解是多態就是一個類（class）演伸出多種物件（Object），父類相當於模板藍圖的功能。虛函數是用來子類繼承後能夠複寫的函數。
我們先看一下虛函數嘴臉長怎樣：
在下面的例子中是一個 Base Class（基類、父類），如果函數前面宣告有添加 virtual 就是虛函數。
1 2 3 4 5 6  class Shape { public: virtual string toString() const; virtual double getArea() const; }   下面是一個 Circle 子類（superclass）（超生類、派生類），引入 Circle 的 getArea() 和 toString() 是虛函數，我們現在是在子類中重寫（重定義）類的虛構函數（此時你可以將父類的虛構函數想像成模板）。
1 2 3 4 5 6 7 8 9 10 11 12  class Circle : public Shape { private: double radius; public: Circle(); Circle(double); double getRadius() const; void setRadius(double); double getArea() const; string toString() const; }   實際當我們在使用虛構函數時，是把它當作跳板，去自動便是哪個函式是哪個函式，e.]]></description>
</item><item>
    <title>在 ArchLinux 上搭建 LaTeX 環境並使用 VScode 編寫</title>
    <link>https://huangno1.github.io/arhlinux_vscode_latex_install_configuration/</link>
    <pubDate>Fri, 07 Aug 2020 16:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/arhlinux_vscode_latex_install_configuration/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/arhlinux_vscode_latex_install_configuration.png" referrerpolicy="no-referrer">
            </div>前言 紀錄一下我在 ArchLinux 上配置 LaTeX 的過程。
安裝環境 你可以直接安裝集合包，texlive-most 包含很多 Tex Live 應用，但是這樣很佔空間，要安裝 2GB 的硬碟空間，所以你也可以選擇自己想要裝的部份，其中 texlive-core 是必裝的。texlive-langchinese 是中文宏包 CTeX，讓 LaTeX 支持中文。
1 2 3 4 5  sudo pacman -S texlive-most # 安裝約 12 個包 sudo pacman -S texlive-core # 只裝核心 sudo pacman -S texlive-langchinese # 安裝中文支持   測試安裝 進入特定資料夾，輸入下面兩行指令測試是否安裝成功，
 tex '\empty Hello world!\bye' 會生成 texput.dvi 和 texput.log。 pdftex '\empty Hello world!\bye' 會生成 texput.pdf。  1 2  tex &#39;\empty Hello world!]]></description>
</item><item>
    <title>Markdown 學習筆記 - 基礎語法</title>
    <link>https://huangno1.github.io/markdown_learn_note_basic_syntax/</link>
    <pubDate>Fri, 07 Aug 2020 13:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/markdown_learn_note_basic_syntax/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/markdown_learn_note_basic_syntax.png" referrerpolicy="no-referrer">
            </div>前言 Markdown 我認為是非常好的語言，我每次寫 Blog 或是寫項目、作筆記，Markdown 是首選，LaTeX 比較適合拿來寫報告或是論文。我就在這篇寫一下 Markdown 基礎語法，也就是平常經常用到的語法，其實當初學 Markdown 只花了一小時，後面慢慢寫多就習慣了。
寫 Markdown 的工具：
我推薦下面幾個：
 Typora：跨平台的 Markdown 編輯器，簡直是利器。 Visual Studio Code：使用 VScode 也可以寫 Markdown，安裝 Markdown All in One 和 Markdown Preview Enhanced 延伸模組，就能夠舒服地寫筆記或文章。 HackMD：線上共筆平台，使用 Markdown，大家在共同寫文檔時可以使用這平台  文本編寫標準 中文文案排版指北 [简体中文 ][繁体中文 ]
區塊元素 標題 h1 - h6，h1 有兩種寫法。第一種是下一行添加 ===，第二種就是加上 #。
1 2 3 4 5 6 7 8 9  h1 標題 === # h1 標題 ## h2 標題 ### h3 標題 #### h4 標題 ##### h5 標題 ###### h6 標題   註解 跟 HTML 一樣的用法使用 &lt;!]]></description>
</item><item>
    <title>JS - 賦值問題</title>
    <link>https://huangno1.github.io/js_pointer_object_array_variable_assignment/</link>
    <pubDate>Thu, 06 Aug 2020 23:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/js_pointer_object_array_variable_assignment/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/js_pointer_object_array_variable_assignment.png" referrerpolicy="no-referrer">
            </div>關於我遇到的問題 這是我在寫小 DEMO 發現的，關於 JS 的賦值問題，這裡涉及到了 Pointer。
下面是我用簡單的 Code 描述我遇到的問題，object 是一個 Object Array，然後傳入函數進行局域變量賦值。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  let object = [ { name: &#34;John&#34;, age: 18 }, { name: &#34;Amy&#34;, age: 20 }, ] function Test(object) { let newOne = object; for (let i = 0; i &lt; newOne.length; i++) { newOne[i].name = &#34;Rose&#34;; } } Test(object) console.]]></description>
</item><item>
    <title>JS - forEach()、map()、filter()、reduce()、循環遍歷</title>
    <link>https://huangno1.github.io/js_array_prototype/</link>
    <pubDate>Thu, 06 Aug 2020 18:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/js_array_prototype/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/js_array_prototype.png" referrerpolicy="no-referrer">
            </div>前言 在這篇文章筆記紀錄一下 JS 的 Array 屬性。
forEach() forEach 是對每一項的操作，會影響原來的 array，不會有回傳值，即使強制寫 return，也會是空值，例子如下。
1 2 3 4 5 6 7 8 9 10 11 12 13 14  // JS forEach 與 map  // forEach 是對每一項的操作，會影響原來的 array let arr = [1, 2, 3, 4, 5, 6] // 對數組直接進行循環，相當於 for，沒有返回值 // result 不會有返回值 即使寫了 return 也是 undefined let result = arr.forEach((item, index, arr) =&gt; { console.log(item) console.log(index) console.log(arr) return item }) console.log(result)   map() map 則是不會影響原來的 array 值，而是生成新的值返回給新的數組。對 Array 每一項進行加工，加工完成之後返回一個新的數組。]]></description>
</item><item>
    <title>React 學習筆記</title>
    <link>https://huangno1.github.io/react_learn_note/</link>
    <pubDate>Wed, 05 Aug 2020 21:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/react_learn_note/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/react_learn_note.png" referrerpolicy="no-referrer">
            </div>前言 因為我前段時間學了 React，我會在這邊文章紀錄我學到的內容。
建立一個 Hello World 在終端機輸入下面的指令，會在該目錄下生成一個名為 my-app 的 React 應用目錄。
 註：npx 是 npm 5.2+ 或更高版本附帶的包運行器工具。
 npx
1  npx create-react-app my-app   npm
1  npm init react-app my-app   Yarn
 Yarn 0.25+ 才能使用 yarn create &lt;starter-kit-package&gt;
 1  yarn create react-app my-app   Project 結構 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  my-app ├── README.]]></description>
</item><item>
    <title>Flask 跨域設置</title>
    <link>https://huangno1.github.io/flask_cors/</link>
    <pubDate>Wed, 05 Aug 2020 20:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/flask_cors/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/flask_cors.png" referrerpolicy="no-referrer">
            </div>前言 關於 Flask 跨域接收請求的設置真的蠻好配置的，我想並不難，但我還是稍微寫一下，避免新手不知道怎麼做。
安裝 跨域有 flask_cors 這個工具。
1  pip install flask_cors   配置 1 2 3 4 5 6 7 8 9  from flask import Flask, jsonify, request from flask_cors import CORS app = Flask(__name__) # enable CORS CORS(app) if __name__ == &#34;__main__&#34;: app.run(debug=True)   ]]></description>
</item><item>
    <title>Flask 中使用 JWT</title>
    <link>https://huangno1.github.io/flask_jwt/</link>
    <pubDate>Wed, 05 Aug 2020 13:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/flask_jwt/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/flask_jwt.png" referrerpolicy="no-referrer">
            </div>前言 因為我寫的上一篇文章是&rdquo;Flask 中使用 MySQL&quot;，文章內容有提及 JWT 的使用，這篇就是寫一下我在 JWT 上的使用。
Cookie Session  Cookie 和 LocalStorage 最大的區別是 Cookie 可以設置時效性，而LocalStorage 不行。
 在 JWT 授權認證技術還沒出來之前，我們是使用 Cookie 和 Session 來做驗證，分別是前端（Front End）和後端（Back End）的本地存儲。過程如下：
 JWT 理論部份 因為 Cookie Session 這種方式太過繁瑣，所以出來了 JWT 這樣的技術，原名 (JSON Web Tokens)，就是帶時效的 Token。主要差別是，Server 端不需要存 Session，大致情形如下：
 JWT 主要分為三段，個別為 header、payload 與 signature，中間以 . 做區隔，每一段都是透過 Base64Url 去編碼，中間的 payload 有時候會加密。
e.g.
1 2 3  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJlbWFpbCI6Imhpcm9AZ21haWwuY29tIn0. WAKjPd_0qcEG3dA9pEwAiw-0ADb8VwqFlSWiIYJTymo   header 存放 token 型別與加密方式 。]]></description>
</item><item>
    <title>Flask 中使用 MySQL</title>
    <link>https://huangno1.github.io/flask_mysql/</link>
    <pubDate>Tue, 04 Aug 2020 22:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/flask_mysql/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/flask_mysql.png" referrerpolicy="no-referrer">
            </div>前言 我一開始學 Flask 時是看 Flask 的官方教學學的，不得不說Flask 官方文檔寫得很好。因為 Flask 官方教學是使用 Sqlite 做為數據庫，但是我想要使用 MySQL，在自己網上搜索，加上自己的鑽研手做，這裡紀錄我摸索的結果。因為我偏好使用原生 SQL 語法，所以下面的數據庫操作都是原生語句，例子也是我之前做的某個項目裡面拿出來的。
安裝 1  pip install mysql-connector-python   引入、連接數據庫 因為是 MySQL，所以自己要在自己的電腦本地數據庫寫好要用的數據庫。下面的連接參數要自己改。
1 2 3 4 5 6 7 8 9 10 11 12 13  import mysql.connector from mysql.connector import Error # 連接 MySQL 資料庫 connection = mysql.connector.connect( host=&#39;localhost&#39;, # 主機名稱 database=&#39;myTelegram&#39;, # 資料庫名稱 user=&#39;Rem&#39;, # 帳號 password=&#39;&#39;) # 密碼 cursor = connection.cursor(buffered=True) cursor.execute(&#34;SELECT DATABASE();&#34;) record = cursor.]]></description>
</item><item>
    <title>關於學習軟件工程與技術的方法</title>
    <link>https://huangno1.github.io/how_to_learn_cs/</link>
    <pubDate>Tue, 04 Aug 2020 21:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/how_to_learn_cs/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/how_to_learn_cs.png" referrerpolicy="no-referrer">
            </div>學習態度  讀萬卷書不如行萬里路。
 我認為學習工程相關最重要的莫過於要親身去實踐手作，而非靠一堆理論知識和小實驗去學習，做項目讓自己有經驗莫過於看一堆理論知識以及為考試或光鮮亮麗的文憑。切記，實作是刻印在人的身體。
再者，學習是靠興趣的，想要學好軟件工程，需要愛上編程，如果只是像學校老師或學長姊得學習步調走，而不自己主動去學習並實作自己感興趣部份，你將永遠不會學會編程。
學習步調 學習一門技術分幾個階段：
  初步認識，了解原理等理論知識。
  會寫 Hello world，學會基礎使用語法。
  熟練該門語言，並能自己使用這技術開發中小型 Demo 與項目。
  精通該語言，能駕馭該門技術，開發大型項目。
  不要學到了 Hello world 就認為自己已經精通了，你還隻是菜鳥。不要還沒學會爬就想跑步，除非你自認天才。
關於文檔 我自己認為文檔在開發項目的比重並沒有很重要，要求文檔的前提是整體隊伍有一定的水平實力能去實現，不然寫出來的文檔也無法實現。做項目的是人不是文字，文檔頂多起到開發輔助的效用。然而，現在學校很多比賽卻是重視文檔，各種 PPT 大賽到 PS、PR 編程，這事實讓人痛心，使很多有實力的人因為文檔的繁文縟節而退卻。要真正做到的是項目不是靠文字或嘴巴或白嫖網上開源代碼&hellip;&hellip;等方法實現，而是靠自己紮實編寫的代碼。
代碼技巧與學習管道 我認為有幾個技能是一個程序員必備的：
  學會使用搜索引擎關鍵字。
  翻牆使用 Google、Github、Stackoverflow、Youtube&hellip;等學習網頁。
  官方文檔有時是最好的選擇。
  編程注意註解，還有變量函數命名、代碼編排，儘可能讓代碼精簡。
  要捨得花時間學習新知識。
  Git、Github、Markdown 的使用，寫正式報告建議使用 LaTeX。文檔交 PDF 格式。
  自己的 Blog，用來創造發表自己的想法與技巧。
  保持上進心、好奇心與謙虛，要勇於探索新事物，且人上有人，天外有天。
  最後希望大家能擇你所愛，愛你所擇，如果敲代碼是你的興趣，那恭喜你，你有自己的愛好。]]></description>
</item></channel>
</rss>
