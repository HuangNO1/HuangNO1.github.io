<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Rem Blog</title>
        <link>https://huangno1.github.io/posts/</link>
        <description>所有文章 | Rem Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>fh831.cp9gw@gmail.com (Huang Po-Hsun)</managingEditor>
            <webMaster>fh831.cp9gw@gmail.com (Huang Po-Hsun)</webMaster><lastBuildDate>Fri, 07 Aug 2020 13:49:28 &#43;0800</lastBuildDate><atom:link href="https://huangno1.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Markdown 學習筆記 - 基礎語法</title>
    <link>https://huangno1.github.io/markdown_learn_note_basic_syntax/</link>
    <pubDate>Fri, 07 Aug 2020 13:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/markdown_learn_note_basic_syntax/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/markdown_learn_note_basic_syntax.png" referrerpolicy="no-referrer">
            </div>前言 Markdown 我認為是非常好的語言，我每次寫 Blog 或是寫項目、作筆記，Markdown 是首選，LaTeX 比較適合拿來寫報告或是論文。我就在這篇寫一下 Markdown 基礎語法，也就是平常經常用到的語法，其實當初學 Markdown 只花了一小時，後面慢慢寫多就習慣了。
寫 Markdown 的工具：
我推薦下面兩個
 Typora：跨平台的 Markdown 編輯器，簡直是利器。 Visual Studio Code：使用 VScode 也可以寫 Markdown，安裝 Markdown All in One 和 Markdown Preview Enhanced 延伸模組，就能夠舒服地寫筆記或文章。 HackMD：線上共筆平台，使用 Markdown，大家在共同寫文檔時可以使用這平台  文本編寫標準 中文文案排版指北 [简体中文 ][繁体中文 ]
區塊元素 標題 h1 - h6，h1 有兩種寫法。第一種是下一行添加三個 =，第二種就是加上 #。
1 2 3 4 5 6 7 8 9  h1 標題 === # h1 標題 ## h2 標題 ### h3 標題 #### h4 標題 ##### h5 標題 ###### h6 標題   註解 跟 HTML 一樣的用法使用 &lt;!]]></description>
</item><item>
    <title>JS - 賦值問題</title>
    <link>https://huangno1.github.io/js_pointer_object_array_variable_assignment/</link>
    <pubDate>Thu, 06 Aug 2020 23:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/js_pointer_object_array_variable_assignment/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/js_pointer_object_array_variable_assignment.png" referrerpolicy="no-referrer">
            </div>關於我遇到的問題 這是我在寫小 DEMO 發現的，關於 JS 的賦值問題，這裡涉及到了 Pointer。
下面是我用簡單的 Code 描述我遇到的問題，object 是一個 Object Array，然後傳入函數進行局域變量賦值。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  let object = [ { name: &#34;John&#34;, age: 18 }, { name: &#34;Amy&#34;, age: 20 }, ] function Test(object) { let newOne = object; for (let i = 0; i &lt; newOne.length; i++) { newOne[i].name = &#34;Rose&#34;; } } Test(object) console.]]></description>
</item><item>
    <title>JS - forEach()、map()、filter()、reduce()、循環遍歷</title>
    <link>https://huangno1.github.io/js_array_prototype/</link>
    <pubDate>Thu, 06 Aug 2020 18:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/js_array_prototype/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/js_array_prototype.png" referrerpolicy="no-referrer">
            </div>前言 在這篇文章筆記紀錄一下 JS 的 Array 屬性。
forEach() forEach 是對每一項的操作，會影響原來的 array，不會有回傳值，即使強制寫 return，也會是空值，例子如下。
1 2 3 4 5 6 7 8 9 10 11 12 13 14  // JS forEach 與 map  // forEach 是對每一項的操作，會影響原來的 array let arr = [1, 2, 3, 4, 5, 6] // 對數組直接進行循環，相當於 for，沒有返回值 // result 不會有返回值 即使寫了 return 也是 undefined let result = arr.forEach((item, index, arr) =&gt; { console.log(item) console.log(index) console.log(arr) return item }) console.log(result)   map() map 則是不會影響原來的 array 值，而是生成新的值返回給新的數組。對 Array 每一項進行加工，加工完成之後返回一個新的數組。]]></description>
</item><item>
    <title>React 學習筆記</title>
    <link>https://huangno1.github.io/react_learn_note/</link>
    <pubDate>Wed, 05 Aug 2020 21:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/react_learn_note/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/react_learn_note.png" referrerpolicy="no-referrer">
            </div>前言 因為我前段時間學了 React，我會在這邊文章紀錄我學到的內容。
建立一個 Hello World 在終端機輸入下面的指令，會在該目錄下生成一個名為 my-app 的 React 應用目錄。
 註：npx 是 npm 5.2+ 或更高版本附帶的包運行器工具。
 npx
1  npx create-react-app my-app   npm
1  npm init react-app my-app   Yarn
 Yarn 0.25+ 才能使用 yarn create &lt;starter-kit-package&gt;
 1  yarn create react-app my-app   Project 結構 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  my-app ├── README.]]></description>
</item><item>
    <title>Flask 跨域設置</title>
    <link>https://huangno1.github.io/flask_cors/</link>
    <pubDate>Wed, 05 Aug 2020 20:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/flask_cors/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/flask_cors.png" referrerpolicy="no-referrer">
            </div>前言 關於 Flask 跨域接收請求的設置真的蠻好配置的，我想並不難，但我還是稍微寫一下，避免新手不知道怎麼做。
安裝 跨域有 flask_cors 這個工具。
1  pip install flask_cors   配置 1 2 3 4 5 6 7 8 9  from flask import Flask, jsonify, request from flask_cors import CORS app = Flask(__name__) # enable CORS CORS(app) if __name__ == &#34;__main__&#34;: app.run(debug=True)   ]]></description>
</item><item>
    <title>Flask 中使用 JWT</title>
    <link>https://huangno1.github.io/flask_jwt/</link>
    <pubDate>Wed, 05 Aug 2020 13:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/flask_jwt/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/flask_jwt.png" referrerpolicy="no-referrer">
            </div>前言 因為我寫的上一篇文章是&rdquo;Flask 中使用 MySQL&quot;，文章內容有提及 JWT 的使用，這篇就是寫一下我在 JWT 上的使用。
Cookie Session  Cookie 和 LocalStorage 最大的區別是 Cookie 可以設置時效性，而LocalStorage 不行。
 在 JWT 授權認證技術還沒出來之前，我們是使用 Cookie 和 Session 來做驗證，分別是前端（Front End）和後端（Back End）的本地存儲。過程如下：
 JWT 理論部份 因為 Cookie Session 這種方式太過繁瑣，所以出來了 JWT 這樣的技術，原名 (JSON Web Tokens)，就是帶時效的 Token。主要差別是，Server 端不需要存 Session，大致情形如下：
 JWT 主要分為三段，個別為 header、payload 與 signature，中間以 . 做區隔，每一段都是透過 Base64Url 去編碼，中間的 payload 有時候會加密。
e.g.
1 2 3  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJlbWFpbCI6Imhpcm9AZ21haWwuY29tIn0. WAKjPd_0qcEG3dA9pEwAiw-0ADb8VwqFlSWiIYJTymo   header 存放 token 型別與加密方式 。]]></description>
</item><item>
    <title>Flask 中使用 MySQL</title>
    <link>https://huangno1.github.io/flask_mysql/</link>
    <pubDate>Tue, 04 Aug 2020 22:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/flask_mysql/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/flask_mysql.png" referrerpolicy="no-referrer">
            </div>前言 我一開始學 Flask 時是看 Flask 的官方教學學的，不得不說Flask 官方文檔寫得很好。因為 Flask 官方教學是使用 Sqlite 做為數據庫，但是我想要使用 MySQL，在自己網上搜索，加上自己的鑽研手做，這裡紀錄我摸索的結果。因為我偏好使用原生 SQL 語法，所以下面的數據庫操作都是原生語句，例子也是我之前做的某個項目裡面拿出來的。
安裝 1  pip install mysql-connector-python   引入、連接數據庫 因為是 MySQL，所以自己要在自己的電腦本地數據庫寫好要用的數據庫。下面的連接參數要自己改。
1 2 3 4 5 6 7 8 9 10 11 12 13  import mysql.connector from mysql.connector import Error # 連接 MySQL 資料庫 connection = mysql.connector.connect( host=&#39;localhost&#39;, # 主機名稱 database=&#39;myTelegram&#39;, # 資料庫名稱 user=&#39;Rem&#39;, # 帳號 password=&#39;&#39;) # 密碼 cursor = connection.cursor(buffered=True) cursor.execute(&#34;SELECT DATABASE();&#34;) record = cursor.]]></description>
</item><item>
    <title>關於學習軟件工程與技術的方法</title>
    <link>https://huangno1.github.io/how_to_learn_cs/</link>
    <pubDate>Tue, 04 Aug 2020 21:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/how_to_learn_cs/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/how_to_learn_cs.png" referrerpolicy="no-referrer">
            </div>學習態度  讀萬卷書不如行萬里路。
 我認為學習工程相關最重要的莫過於要親身去實踐手作，而非靠一堆理論知識和小實驗去學習，做項目讓自己有經驗莫過於看一堆理論知識以及為考試或光鮮亮麗的文憑。切記，實作是刻印在人的身體。
再者，學習是靠興趣的，想要學好軟件工程，需要愛上編程，如果只是像學校老師或學長姊得學習步調走，而不自己主動去學習並實作自己感興趣部份，你將永遠不會學會編程。
學習步調 學習一門技術分幾個階段：
  初步認識，了解原理等理論知識。
  會寫 Hello world，學會基礎使用語法。
  熟練該門語言，並能自己使用這技術開發中小型 Demo 與項目。
  精通該語言，能駕馭該門技術，開發大型項目。
  不要學到了 Hello world 就認為自己已經精通了，你還隻是菜鳥。不要還沒學會爬就想跑步，除非你自認天才。
關於文檔 我自己認為文檔在開發項目的比重並沒有很重要，要求文檔的前提是整體隊伍有一定的水平實力能去實現，不然寫出來的文檔也無法實現。做項目的是人不是文字，文檔頂多起到開發輔助的效用。然而，現在學校很多比賽卻是重視文檔，各種 PPT 大賽到 PS、PR 編程，這事實讓人痛心，使很多有實力的人因為文檔的繁文縟節而退卻。要真正做到的是項目不是靠文字或嘴巴或白嫖網上開源代碼&hellip;&hellip;等方法實現，而是靠自己紮實編寫的代碼。
代碼技巧與學習管道 我認為有幾個技能是一個程序員必備的：
  學會使用搜索引擎關鍵字。
  翻牆使用 Google、Github、Stackoverflow、Youtube&hellip;等學習網頁。
  官方文檔有時是最好的選擇。
  編程注意註解，還有變量函數命名、代碼編排，儘可能讓代碼精簡。
  要捨得花時間學習新知識。
  Git、Github、Markdown 的使用，寫正式報告建議使用 LaTeX。文檔交 PDF 格式。
  自己的 Blog，用來創造發表自己的想法與技巧。
  保持上進心、好奇心與謙虛，要勇於探索新事物，且人上有人，天外有天。
  最後希望大家能擇你所愛，愛你所擇，如果敲代碼是你的興趣，那恭喜你，你有自己的愛好。]]></description>
</item><item>
    <title>我在中南大學軟件工程本科大一和大二的這兩年</title>
    <link>https://huangno1.github.io/csu_freshman_sophomore/</link>
    <pubDate>Tue, 04 Aug 2020 16:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/csu_freshman_sophomore/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/csu_freshman_sophomore.png" referrerpolicy="no-referrer">
            </div>來大陸前 今天是 2020/08/04，是我在中南大學本科生大二升大三的暑假，想想時光過得真快，已經兩年了，不知不覺大一時自己還只是一隻菜鳥，現在還是菜鳥，來大陸唸中南大學前，我其實對於大陸不熟悉，畢竟一直在台灣讀的書，甚至一直猶豫，不敢踏出舒適圈，爸媽軟硬兼施強迫我要去大陸唸書，當時我有鄭州大學和中南大學的錄取通知，我自己思考後決定了中南大學，畢竟是雙一流，福州大學因為當時已經決定錄取中南大學，所以我沒有去面試，這是我來中南的由來。至於選擇軟件工程，其實一開始我想要讀的是資訊工程，但是奈何大陸沒有科系（專業）是叫做資訊工程的，結果選錯選成軟件工程，原來大陸的資訊工程是計算機科學，但是現在也沒什麼好後悔的。
大一 中南大學南校區01.png
" 中南大學南校區 
大一大概是我最難適應的，高等數學、離散數學、線性代數真的很難，尤其是大陸的教科書教材我覺得不像台灣寫得那麼通俗易懂，給的例子有時也讓人費解，我還記得我掛科了，但是後面又渾渾噩噩地補考過了，自己的成績實在是差強人意，只有專業課寫 Code 我不容易掛科，我記得大一我的 C++ 是裸考沒複習，過是過了，但是沒去看歷屆，所以分數不如周遭的人高分，有時我仔細想想我大學生活到現在到底學了什麼，這時就真的很難受，答案是沒有，我不知道自己在學什麼，有什麼技術是自己可以有自信的？沒有&hellip;我覺得這一切都太荒謬了，上課耽誤了學習，我覺得大陸計算機教育最大的敗筆是只會搞虛的理論知識，忘記了既然讀的是工程學，就應該側重實作，從實作中學習理論，我無法理解為什麼上 C++ 不全程在電腦教室（機房）上課，為什麼考試要手寫代碼在紙上，不過聽說現在大一新生有改成在機房考試。再來，學校教的東西都很淺，如果你只是妥妥跟著學校安排學，你只會成為一名碼農，對計算機專業沒有興趣，只是看在錢多才讀這專業，說實在的，這是虛度人生，選擇了根本不是自己熱衷的專業。我大一根本就是在虛度光陰。
我和我朋友們在大一下報名了大學生創新創業立項，要說報名的一開始的感覺是什麼，那就是抱有理想，最後我已經從希望變絕望，原來所謂的學校比賽比的是文檔呀！我當時是當隊長，然而我卻對隊長這職務感到煩厭了，畢竟最後大家都因為課業沒時間參加比賽，然後也察覺其實這些比賽進到國家級的大多都是祖傳的項目，沒幾個人是有做實事的，虛假的表面，包裝起來的文檔。
大一最讓我感到新鮮的是長沙冬天下的雪景，但是大二就沒有了，看來雪景不是年年都有。
大二 中南大學南校區02.jpg
" 中南大學南校區 
 大二上軟件工程學院的軟件工程併入計算機學院。
 我們軟件工程 18 級從南校區搬到了鐵道校區，然而自習的地方真的很不舒服，很想進實驗室自習，鐵道的圖書館找不到自習的位置又小的可憐，然後不管是南校新校區還是鐵道的圖書館，最另讓我感到詬病的是佔座文化，佔著茅坑不拉屎，桌上有書或是水壺，但是座位上卻一直不見人影。鐵道校區真的蠻糟糕的，但其實我在南校區時就覺得宿舍環境糟糕了，沒想到鐵道更糟。然後也養成不喜歡去學校食堂吃東西，因為排隊排太長了，菜色大多也是辣的，不知不覺中，自己吃習慣了辣和重口味，回台灣吃飯時，竟然覺得台灣的菜沒味道。
我開始發現，所以我學的技術都是靠自學，學校教不了我任何東西，重新認識到自學的重要性，我缺乏做 Project 的經驗，所以我開始不重視學校的課程，但是該考試要背的還是會去背，好消息是我已經爭取到進老師的實驗室。
大二的寒假這時我也成年滿 20 歲了，但是 2020/1/11 沒有回台灣投票，但選總統的大事我還是有關注。因為疫情關係，大二下學期我在台灣和大家線上上課，大家都是遠程教學，我想我大二下越來越厭惡什麼文學編程，還有只會說不會做，出一張嘴的事物。話說大二下的編譯原理真的很難，幸好最後老師手下留情，沒有將考卷出的太難。
對湖南長沙的感受 真的是鄉下耶，我以為長沙會發達一些，雖然我讀的是 985，但是實在不想不嘴一下，貴為 985 卻沒感到學校資源有多豐富。剛來大陸就因為不熟被別人騙，我覺得很過份，人情味和普遍素質不如台灣。然後也不喜歡在大陸辦事人員喜歡踢皮球的習慣，還有玩文字遊戲，拐彎抹角，辦事效率低，一堆形式主義，最痛恨的就是形式主義。但也不是沒有優點，像是其實很多同學普遍素質不錯，在一些意見上雖然不同，但也只是偶爾互相討論也互相包容理解，不曾發生嚴重口角。
最後 現在正在寫這篇文章的我會對在大陸未來的出路感到迷茫，我也不會包裝自己，口才比不過別人，正在朝著變強努力中。或許最後會回台灣吧。]]></description>
</item><item>
    <title>VUE 技巧與經驗</title>
    <link>https://huangno1.github.io/vue_skill/</link>
    <pubDate>Fri, 31 Jul 2020 16:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/vue_skill/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/vue_skill.png" referrerpolicy="no-referrer">
            </div>前言 經過許久寫 VueJS 的經驗，實在是有些技巧我想要紀錄下來，畢竟當時我摸索了很久，從一開始的不擅長到後面的熟練，經歷的 Project 很多。希望能幫助新手快速掌握 VueJS。
這文章不會教你 Vue 基礎語法等詳細的基礎部份。所以在看這篇文章時需要一些 Vue 基礎。
如果因為沒有範例觀摩的話，可以看我在 2020/06/30 - 2020/07/17 暑假實訓寫的個人空間系統 - Blog 前端。
Vue-cli 腳手架使用 創建應用  用了 CDN 引入就不能用 Vue-cli 了，整個的結構差太多，通常 CDN 引入就是 Demo 或是很小的專案某部分用來代替 JQuery 用。
 大部分開發還是使用 Vue-cli 比較方便。關於使用 Vue-cli 現在使用 npm 可以自己選擇要裝哪些東西，使用越來越方便，通常我是建議自定義，因為 eslint 的標準太高了，每次打開瀏覽器 Console 就一堆警告。所以在後面的選擇將 Linter / Formatter 這一項按空白鍵（Space）去掉。目前我開發項目初始構建只需要下列三個就暫時夠用了：
 Babel：自由開源的 JavaScript 編譯器、轉譯器。 Router：Vue 的路由。 Vuex：組件狀態管理。   關於怎麼裝 npm 和 vue-cli，我想 npm 就網上下載安裝，vue-cli 就執行 npm install -g @vue/cli 指令進行安裝。]]></description>
</item></channel>
</rss>
