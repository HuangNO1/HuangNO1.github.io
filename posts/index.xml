<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Rem Blog</title>
        <link>https://huangno1.github.io/posts/</link>
        <description>所有文章 | Rem Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>fh831.cp9gw@gmail.com (Huang Po-Hsun)</managingEditor>
            <webMaster>fh831.cp9gw@gmail.com (Huang Po-Hsun)</webMaster><lastBuildDate>Tue, 04 Aug 2020 21:49:28 &#43;0800</lastBuildDate><atom:link href="https://huangno1.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>關於學習軟件工程與技術的方法</title>
    <link>https://huangno1.github.io/how_to_learn_cs/</link>
    <pubDate>Tue, 04 Aug 2020 21:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/how_to_learn_cs/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/csu_freshman_sophomore.png" referrerpolicy="no-referrer">
            </div>學習態度  讀萬卷書不如行萬里路。
 我認為學習工程相關最重要的莫過於要親身去實踐手作，而非靠一堆理論知識和小實驗去學習，做項目讓自己有經驗莫過於看一堆理論知識以及為考試或光鮮亮麗的文憑。切記，實作是刻印在人的身體。
再者，學習是靠興趣的，想要學好軟件工程，需要愛上編程，如果只是像學校老師或學長姊得學習步調走，而不自己主動去學習並實作自己感興趣部份，你將永遠不會學會編程。
學習步調 學習一門技術分幾個階段：
  初步認識，了解原理等理論知識。
  會寫 Hello world，學會基礎使用語法。
  熟練該門語言，並能自己使用這技術開發中小型 Demo 與項目。
  精通該語言，能駕馭該門技術，開發大型項目。
  不要學到了 Hello world 就認為自己已經精通了，你還隻是菜鳥。不要還沒學會爬就想跑步，除非你自認天才。
關於文檔 我自己認為文檔在開發項目的比重並沒有很重要，要求文檔的前提是整體隊伍有一定的水平實力能去實現，不然寫出來的文檔也無法實現。做項目的是人不是文字，文檔頂多起到開發輔助的效用。然而，現在學校很多比賽卻是重視文檔，各種 PPT 大賽到 PS、PR 編程，這事實讓人痛心，使很多有實力的人因為文檔的繁文縟節而退卻。要真正做到的是項目不是靠文字或嘴巴或白嫖網上開源代碼&hellip;&hellip;等方法實現，而是靠自己紮實編寫的代碼。
代碼技巧與學習管道 我認為有幾個技能是一個程序員必備的：
  學會使用搜索引擎關鍵字。
  翻牆使用 Google、Github、Stackoverflow、Youtube&hellip;等學習網頁。
  官方文檔有時是最好的選擇。
  編程注意註解，還有變量函數命名、代碼編排，儘可能讓代碼精簡。
  要捨得花時間學習新知識。
  Git、Github、Markdown 的使用，寫正式報告建議使用 LaTeX。文檔交 PDF 格式。
  自己的 Blog，用來創造發表自己的想法與技巧。
  保持上進心、好奇心與謙虛，要勇於探索新事物，且人上有人，天外有天。
  最後希望大家能擇你所愛，愛你所擇，如果敲代碼是你的興趣，那恭喜你，你有自己的愛好。]]></description>
</item><item>
    <title>我在中南大學本科大一和大二的這兩年</title>
    <link>https://huangno1.github.io/csu_freshman_sophomore/</link>
    <pubDate>Tue, 04 Aug 2020 16:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/csu_freshman_sophomore/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/csu_freshman_sophomore.png" referrerpolicy="no-referrer">
            </div>來大陸前 今天是 2020/08/04，是我在中南大學本科生大二升大三的暑假，想想時光過得真快，已經兩年了，不知不覺大一時自己還只是一隻菜鳥，現在還是菜鳥，來大陸唸中南大學前，我其實對於大陸不熟悉，畢竟一直在台灣讀的書，甚至一直猶豫，不敢踏出舒適圈，爸媽軟硬兼施強迫我要去大陸唸書，當時我有鄭州大學和中南大學的錄取通知，我自己思考後決定了中南大學，畢竟是雙一流，福州大學因為當時已經決定錄取中南大學，所以我沒有去面試，這是我來中南的由來。至於選擇軟件工程，其實一開始我想要讀的是資訊工程，但是奈何大陸沒有科系（專業）是叫做資訊工程的，結果選錯選成軟件工程，原來大陸的資訊工程是計算機科學，但是現在也沒什麼好後悔的。
大一 中南大學南校區01.png
" 中南大學南校區 
大一大概是我最難適應的，高等數學、離散數學、線性代數真的很難，尤其是大陸的教科書教材我覺得不像台灣寫得那麼通俗易懂，給的例子有時也讓人費解，我還記得我掛科了，但是後面又渾渾噩噩地補考過了，自己的成績實在是差強人意，只有專業課寫 Code 我不容易掛科，我記得大一我的 C++ 是裸考沒複習，過是過了，但是沒去看歷屆，所以分數不如周遭的人高分，有時我仔細想想我大學生活到現在到底學了什麼，這時就真的很難受，答案是沒有，我不知道自己在學什麼，有什麼技術是自己可以有自信的？沒有&hellip;我覺得這一切都太荒謬了，上課耽誤了學習，我覺得大陸計算機教育最大的敗筆是只會搞虛的理論知識，忘記了既然讀的是工程學，就應該側重實作，從實作中學習理論，我無法理解為什麼上 C++ 不全程在電腦教室（機房）上課，為什麼考試要手寫代碼在紙上，不過聽說現在大一新生有改成在機房考試。再來，學校教的東西都很淺，如果你只是妥妥跟著學校安排學，你只會成為一名碼農，對計算機專業沒有興趣，只是看在錢多才讀這專業，說實在的，這是虛度人生，選擇了根本是自己熱衷的專業。我大一根本就是在虛度光陰。
我和我朋友們在大二下報名了大學生創新創業立項，要說報名的一開始的感覺是什麼，那就是抱有理想，最後我已經從希望變絕望，原來所謂的學校比賽比的是文檔呀！我當時是當隊長，然而我卻對隊長這職務感到煩厭了，畢竟最後大家都因為課業沒時間參加比賽，然後也察覺其實這些比賽進到國家級的大多都是祖傳的項目，沒幾個人是有做實事的，虛假的表面，包裝起來的文檔。
大一最讓我感到新鮮的是長沙冬天下的雪景，但是大二就沒有了，看來雪景不是年年都有。
大二 中南大學南校區02.jpg
" 中南大學南校區 
我們軟件工程 18 級從南校區搬到了鐵道校區，然而自習的地方真的很不舒服，很想進實驗室自習，鐵道的圖書館找不到自習的位置又小的可憐，然後不管是南校新校區還是鐵道的圖書館，最另讓我感到詬病的是佔座文化，站著茅坑不拉屎，桌上有書或是水壺，但是座位上卻一直不見人影。鐵道校區真的蠻糟糕的，但其實我在南校區時就覺得宿舍環境糟糕了，沒想到鐵道更糟。然後也養成不喜歡去學校食堂吃東西，因為排隊排太長了，菜色大多也是辣了。
我開始發現，所以我學的技術都是靠自學，學校教不了我任何東西，重新認識到自學的重要性，我缺乏做 Project 的經驗，所以我開始不重視學校的課程，但是該考試要背的還是會去背，好消息是我已經爭取到進老師的實驗室。
大二的寒假這時我也成年滿 20 歲了，但是 2020/1/11 沒有回台灣投票，但選總統的大事我還是有關注。因為疫情關係，大二下學期我在台灣和大家線上上課，大家都是遠程教學，我想我大二下越來越厭惡什麼文學編程，還有只會說不會做，出一張嘴的事物。話說大二下的編譯原理真的很難，幸好最後老師手下留情，沒有將考卷出的太難。
對湖南長沙的感受 真的是鄉下耶，我以為長沙會發達一些，雖然我讀的是 985，但是實在不想不嘴一下，貴為 985 卻沒感到學校資源有多豐富。剛來大陸就因為不熟被別人騙，我覺得很過份，人情味和普遍素質不如台灣。然後也不喜歡在大陸辦事人員喜歡踢皮球的習慣，還有玩文字遊戲，拐彎抹角，辦事效率低，一堆形式主義，最痛恨的就是形式主義。但也不是沒有優點，像是其實很多同學普遍素質不錯，在一些意見上雖然不同，但也只是偶爾互相討論也互相包容理解，不曾發生口角。
最後 現在正在寫這篇文章的我會對在大陸未來的出路感到迷茫，我也不會包裝自己，口才比不過別人，正在朝著變強努力中。或許最後會回台灣吧。]]></description>
</item><item>
    <title>VUE 技巧與經驗</title>
    <link>https://huangno1.github.io/vue_skill/</link>
    <pubDate>Fri, 31 Jul 2020 16:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/vue_skill/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/vue_skill.png" referrerpolicy="no-referrer">
            </div>前言 經過許久寫 VueJS 的經驗，實在是有些技巧我想要紀錄下來，畢竟當時我摸索了很久，從一開始的不擅長到後面的熟練，經歷的 Project 很多。希望能幫助新手快速掌握 VueJS。
這文章不會教你 Vue 基礎語法等詳細的基礎部份。所以在看這篇文章時需要一些 Vue 基礎。
如果因為沒有範例觀摩的話，可以看我在 2020/06/30 - 2020/07/17 暑假實訓寫的個人空間系統 - Blog 前端。
Vue-cli 腳手架使用 創建應用  用了 CDN 引入就不能用 Vue-cli 了，整個的結構差太多，通常 CDN 引入就是 Demo 或是很小的專案某部分用來代替 JQuery 用。
 大部分開發還是使用 Vue-cli 比較方便。關於使用 Vue-cli 現在使用 npm 可以自己選擇要裝哪些東西，使用越來越方便，通常我是建議自定義，因為 eslint 的標準太高了，每次打開瀏覽器 Console 就一堆警告。所以在後面的選擇將 Linter / Formatter 這一項按空白鍵（Space）去掉。目前我開發項目初始構建只需要下列三個就暫時夠用了：
 Babel：自由開源的 JavaScript 編譯器、轉譯器。 Router：Vue 的路由。 Vuex：組件狀態管理。   關於怎麼裝 npm 和 vue-cli，我想 npm 就網上下載安裝，vue-cli 就執行 npm install -g @vue/cli 指令進行安裝。]]></description>
</item><item>
    <title>Rem Blog 的構造改革過程心得</title>
    <link>https://huangno1.github.io/hugo_theme_change/</link>
    <pubDate>Fri, 31 Jul 2020 14:22:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/hugo_theme_change/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/hugo_theme_change.png" referrerpolicy="no-referrer">
            </div>感觸 我第一次接觸 Hugo 的時候，是我因為朋友的技術 Blog 所以感興趣，尤其因為當時剛開始接觸項目和比賽，所以學了 Git 和 Markdown 卻不熟練，笨手笨腳的，那時大一生的我實在是太菜了，現在想想已經過了兩年，已經到了升上大三，時光飛逝，年紀越大感觸越深。
我第一次學怎麼構建 Hugo + Github Pages 構建自己的 Blog 是看這篇文章，這篇文章真的寫得很好，我也推薦我室友看這篇文章，他也快速就上手了。我還記得當時我真的就是折騰在 Hugo 主題上，我第一次選的主題無法發表 Posts，是比較適合拿來做簡歷的主題，害我白搞了一天要換主題，第二次看中了 AllinOne 主題（不知道位為什麼現在這主題從 Hugo Theme 網站下架了），因為看這主題很酷炫，但這主題說真的配置起來很麻煩，最後配置完還發現手機端的顯示不正常，要自己去修 CSS，還有各種 Bug。
最近又因為發現自己很多文章中上傳到圖床的圖片很多被 404 了，我也不知道為什麼被 SM.MS 給 Block 了，加上我 AllinOne 這主題讓我的 Blog 載入速度過慢，直到前幾天，我經過好友的建議，終於決定要全面換新，我也考慮要換哪個主題找好久，好友推薦我 LoveIt 這主題，我也最終被這主題的界面打動，決定改用這個主題，一開始摸索這主題的配置參數弄了很久，加上這個主題沒有正體中文的界面，所以我自己去修 i18n 的文件內容，把自己所有文章的構造重新整理一次，將自己所有的文章要用圖片都使用 Tinypng 壓縮過再上傳到 imgpoi，最終成了現在的樣子。我很滿意 (,,・ω・,,)
Rem BlogRemBlog.png
" Rem Blog 
Reference  AllinOne LoveIt  ]]></description>
</item><item>
    <title>Python 解決羅馬數字轉換 NPSC 模擬試題</title>
    <link>https://huangno1.github.io/python_rome_number_programming/</link>
    <pubDate>Thu, 30 Jul 2020 23:17:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/python_rome_number_programming/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/python_rome_number_programming.jpg" referrerpolicy="no-referrer">
            </div>前言 因為我家人正在學習寫 Python，我教導他去刷題庫，結果在高中生解題系統要解某個基礎題庫的題目時卡住了，我只好幫他解一下題目。
題目 這是高中生解題系統基礎題庫裡的 a013 題目
內容 如果生活在數世紀之前的古羅馬，你應該用過 V 來表示五。V 和 5 這兩個符號都可以用來表示數目五。用來表示數目的符號稱作數字。而羅馬人用來表示數目的符號就是羅馬數字。
以下是七個基本的羅馬數字︰
   羅馬數字 數目     I 1   V 5   X 10   L 50   C 100   D 500   M 1,000    所有其他的數目都是由這些數字組合而成。數目都是由左寫到右，通常值是等於組成的羅馬數字加起來。
例如十七可以表示為
1 2  X + V + I + I = XVII 10 + 5 + 1 + 1 = 17   表示羅馬數字可以使用減法來取代加法的規則。例如四可以不用四個一相加來表示 IIII，而採用五減一來表示 IV。利用這類規則，羅馬人能夠減化許多數目的表示方式，例如 IX 取代 VIIII 表示 9，及 CD 取代 CCCC 表示 400。]]></description>
</item><item>
    <title>Linux 配置 npm</title>
    <link>https://huangno1.github.io/linux_npm_configuration/</link>
    <pubDate>Thu, 06 Feb 2020 11:27:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/linux_npm_configuration/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/linux_npm_configuration.png" referrerpolicy="no-referrer">
            </div>前言 npm（Node Package Manager）是 node 包管理器，是 Node.js 預設的、以 JavaScript 編寫的軟體套件管理系統。相信各位在開發 Vue 或是快應用等方面都會用到 npm，這裡我寫一下關於 npm 在 Linux 上的配置，因為在 Linux 使用 npm，因為在使用 npm 安裝套件時會發生權限不足問題還有下載源速度過慢，我將在這篇文章教大家如何配置 npm。
安裝 npm 裝 npm 時，會幫你也裝 nodeJS等相關依賴。
1  sudo pacman -S npm   npm 本地化  在家目錄建立資料夾  1  mkdir ~/.npm-global   設置 npm 的目標資料夾  1  npm config set prefix &#39;~/.npm-global&#39;   加入本地環境變量  如果你有安裝使用 ZSH，也需要在 ~/.zshrc 引入環境變量。
1 2  vim ~/.]]></description>
</item><item>
    <title>Arch Linux 打包教學</title>
    <link>https://huangno1.github.io/archlinux_makepkg/</link>
    <pubDate>Fri, 31 Jan 2020 11:27:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/archlinux_makepkg/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/archlinux_makepkg.png" referrerpolicy="no-referrer">
            </div>前言 這次之所以會有本次教學，是因為我大二上參加 2019 服創比賽，因為快應用開發 IDE 只有 *.deb 的 Ubuntu 版本，我當時將 *.deb 轉成 tar.gz 適用 Arch 發行版的包失敗，當時我是看這網站使用 Debtap 工具，雖然最後成功轉成 tar.gz，但是安裝時卻輸出該包的結構損壞，我也有在網上看到有建議 dkpg，然而實際上寫 PKGBUILD 才是最好的方法，當時是我朋友將快應用的官方 IDE 打包到 AUR 上，最後安裝成功，打包中途他也遇到很多坑，最後他寫了一篇 Arch Linux 打包教學，但他這篇卻沒有給出實例，讓大多數第一次打包的人看不懂，就跟看官方文檔一樣。網上詳細優質的打包教學少之又少，這次我藉著一個機會體會到打包的過程，為了紀錄這過程，我寫了這篇教學。
 本次文章參考了 ArchWiki 的 Creating packages (简体中文)、PKGBUILD (简体中文) 和書術方隅。你可以認為我這篇是這三篇的綜合進化版。
 簡述 創建 PKGBUILD – 一個包創建描述文件，由 makepkg 使用來從原始碼創建二進位制包。Arch 套裝軟體標準包含當前規則和提高套裝軟體質量的方法。如果已經有了 PKGBUILD 文件，請參考 makepkg (簡體中文)。
 打包前一定要先 Google 一下你要打包的軟體包是不是已經有人上傳到 AUR 了。
 準備工作 必需的軟體包 首先，確定你已安裝必須的工具包。安裝 base-devel 應該足夠了；它包含 make 和 makepkg 其它一些從原始碼編譯時所需要的工具。
創建包的一個很重要的工具是 makepkg（由 pacman 提供），它主要做以下工作：]]></description>
</item><item>
    <title>在 Linux 配置 Java 開發環境到虛擬硬碟 - Java8、Tomcat8、Maven3、IntelliJ IDEA</title>
    <link>https://huangno1.github.io/linux_java_tomcat_maven_intellijidea_install_configuration/</link>
    <pubDate>Tue, 28 Jan 2020 11:27:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/linux_java_tomcat_maven_intellijidea_install_configuration/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/linux_java_tomcat_maven_intellijIDEA_install_configuration.png" referrerpolicy="no-referrer">
            </div>前言 我在這篇會分享我是如何在 Arch 上配置 Java 的開發環境。再來我必須說的是，我這個適用於你的電腦的 Linux SSD (root) 空間不夠的情況，大部分的人是 Windows 與 Linux 雙系統，像我只能把 SSD 割 30GB 給我 Linux (這是因為我電腦上的 Windows 有被廠商更改過，限制了割出的量)，而虛擬硬碟卻可以割到 100GB 以上，我會教大家如何將 Java 環境裝到 /home。如果覺得自己 SSD 夠用，就直接從 AUR 上 yay 下來，直接略過此次教學 (ﾒ ﾟ皿ﾟ)ﾒ，畢竟會有人覺得我這樣的做法讓系統管理有點髒。不過關於環境變量的配置可以參考我這篇文章，不管是裝在 SSD 還是 HDD。
JDK 版本選擇 JDK 1.xxx 和 JDK xxx.0 比如 jdk 1.8 和 jdk 8  參考自這網站的介紹。
 Sun 公司看別人的語言更新都更新到 xxx 了，自己的 Java 版本還是 1 點幾，讓人感覺很落後，所以在 jdk 1.6 的時候對外發布稱之為 jdk 6.0 ，讓人感覺更先進點。在寫 Java 的人眼裡都是叫 1.]]></description>
</item><item>
    <title>在 Linux 上控制 Python 版本 - pyenv</title>
    <link>https://huangno1.github.io/linux_python_pyenv/</link>
    <pubDate>Mon, 27 Jan 2020 15:26:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/linux_python_pyenv/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/linux_python_pyenv.png" referrerpolicy="no-referrer">
            </div>前言 在 Linux 開發 Python 相關的項目，你是不是會碰到關於 Python 版本之類的問題？像是開發 Tensorflow 的時候碰到版本問題，原本 Python 3.7 可以支援 Tensorflow，但是忽然 Python 從 3.7 更新到 3.8.0，這時 Python 3.8 不支援 Tensorflow，你苦惱了，千辛萬苦的項目因為系統更新而導致版本不支援使項目暫停開發，這時 pyenv 將成為你的救星，如果你硬是不肯更新系統 Python 版本，你的系統將會得不到最新的體驗與安全並處於危險的不穩定狀態，系統更新真的很重要。
pyenv 是很棒的 Python 版本控制工具，讓你的電腦可以安裝多個 Python 版本。pyenv 是 Github 上的開源項目，關於使用須知該項目的 README.md 寫得很詳細。我這篇文章就分享一下我在 Arch Linux 的安裝方式。
安裝 從 Github 倉庫上直接 clone 下來。你也可以選擇直接在瀏覽器上下來。然後壓縮包解壓將文件內的文件放入 ~/.pyenv。
 註：如果你在國內網使用 Github 網速過於緩慢，建議開 Proxy，然後給 Git 設置代理。
 設置代理 1 2 3 4 5 6 7 8 9 10  # set http git config --global http.]]></description>
</item><item>
    <title>Archlinux KDE 動態桌布</title>
    <link>https://huangno1.github.io/archlinux_kde_video_wallpaper/</link>
    <pubDate>Wed, 15 Jan 2020 15:26:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/archlinux_kde_video_wallpaper/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/archlinux_kde_video_wallpaper.png" referrerpolicy="no-referrer">
            </div>前言 Wallpapaer Engine 是非常優秀的動態桌布軟體，可惜的是這軟體不僅是需付費，也只支援 Windows，關於 KDE 動態桌布可能大家會有疑慮，Plasma KDE 究竟能不能實現動態桌布？答案是可以的，在這篇我將分享我完成動態桌布的過程。
當然，我也嘗試過使用 vlc 和 xwinwrap + mplayer，尤其是 xwinwrap 最折騰我，包括開機自啟，最後的效果都讓我不滿意。但是目前網上（包含 KDE 官網）所有關於 KDE 動態桌布的項目不是使用上不美觀或是沒效果（黑屏）。最後終於在一篇 Github 項目中看到黑屏的處理方法，無意間那些 KDE Video Wallpaper 插件都可以用了。
如果執意想使用 vlc 或是 xwinwrap + mplayer 的讀者可以參考某人的 Blog：设置 Linux 动态桌面的几种办法 - 簡書
Plasma Video Wallpaper WuSiYu / Plasma Video Wallpaper 這是 Github 上看到的項目，這也是因為我看到他在 B 站上的視頻才知道有這個項目。
完整項目使用過程他已經在他 Github 項目的 README.md 說得很清楚了。
先將項目下載解壓，進入項目目錄輸入以下指令：
 如果沒有安裝 cmake、make 就裝一下，如果有權限問題就給權限。
 1 2 3 4  sudo pacman -S cmake make # 安裝 cmake make cmake .]]></description>
</item></channel>
</rss>
